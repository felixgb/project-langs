result: 1
path: test001.recon

result: 2
path: test002.recon

result: 5
path: test003.recon

-- Nested functions, higher order functions
result: 2
path: test004.recon

-- isZero
result: true
path: test005.recon

-- Higher order functions, isZero
result: false
path: test006.recon

-- Data declarations and case statement
result: 1
path: test007.recon

result: 2
path: test008.recon

-- Case statement with recursive types, lists
result: true
path: test009.recon

-- Case statement
result: false
path: test010.recon

result: \y -> y
path: test011.recon

-- pairs, projection
result: 1
path: test012.recon

-- addition on inferred var
result: 3
path: test013.recon

-- Type vars and recursive types
result: false
path: test014.recon

-- "head" function, with optional types
result: Tag Some, 1
path: test015.recon

-- Exception when wrong type is passed to case
result: false
path: test016.recon

-- Let
result: 4
path: test017.recon

-- Applied let expression
result: false
path: test018.recon

-- fix
result: 120
path: test019.recon

